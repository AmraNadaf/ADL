#EXP1 (accepting and validating user entered data on web pages)
<!DOCTYPE html>
<html lang="en">
<head>
    <title>Exp 1</title>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <style>
        .error {
            color: red;
        }

        html, body {
            height: 100%;
            width: 100%;
            margin: 0;
            padding: 0;
        }

        body {
            background: linear-gradient(to bottom, #B76E79, #C5A1A1);
            font-family: "Helvetica", sans-serif;
            text-align: center;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
        }

        h2 {
            color: white;
            border: 2px solid white;
            border-radius: 5px;
            padding: 10px;
            margin-bottom: 30px;
        }

        form {
            color: white;
            font-size: 18px;
            display: flex;
            flex-direction: column;
            align-items: center;
            gap: 10px;
        }

        label {
            display: flex;
            align-items: center;
            width: 100%;
        }

        input[type="text"],
        input[type="password"],
        input[type="tel"],
        input[type="date"],
        input[type="email"],
        input[type="file"],
        input[type="submit"] {
            width: 100%;
            padding: 8px;
            box-sizing: border-box;
            border-radius: 10px;
            border: 1px solid white; /* Added border for consistency */
            background-color: transparent; /* Transparent background */
            color: white;
        }

        input[type="submit"] {
            margin-top: 15px;
        }
    </style>
</head>
<body>
<h2>USER REGISTRATION FORM</h2>

<form id="registrationform" onsubmit="validate(event)">
    <!--name, password, email, date of birth, gender-->
    <!--name-->
    <label for="username">Username:</label>
    <input type="text" id="username" name="username" required>
    <span id="usernameError" class="error"></span>

    <label for="password">Password:</label>
    <input type="password" id="password" name="password" required>
    <span id="passwordError" class="error"></span>

    <label for="phone">Phone No.:</label>
    <input type="tel" id="phone" name="phone" pattern="[0-9]*" required>
    <span id="phoneError" class="error"></span>

    <label for="date">Date of Birth:</label>
    <input type="date" id="date" name="date" required>

    <label for="email">Email:</label>
    <input type="email" id="email" name="email" required>
    <span id="emailError" class="error"></span>

    <label for="resume">Resume:</label>
    <input type="file" id="resume" name="resume" accept=".pdf,.doc,.docx" required>

    <input type="submit" value="Submit">
    <!--html handles the error part automatically still well ddo this-->
<!-- script for handling errors-->
    <!-- script for handling errors-->
    <script>
        function validate(event) {
            // reset errors
            document.getElementById('usernameError').textContent = '';
            document.getElementById('passwordError').textContent = '';
            document.getElementById('phoneError').textContent = '';
            document.getElementById('emailError').textContent = '';

            // fetch values
            const username = document.getElementById('username').value;
            const email = document.getElementById('email').value;
            const password = document.getElementById('password').value;
            const phone = document.getElementById('phone').value;

            // Validate username
            if (username.length < 3) {
                document.getElementById('usernameError').textContent = 'Username must be at least 3 characters';
                event.preventDefault(); // Prevent form submission
            }

            // Validate email
            const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
            if (!emailRegex.test(email)) {
                document.getElementById('emailError').textContent = 'Invalid email address';
                event.preventDefault();
            }

            // Validate password
            if (password.length < 6) {
                document.getElementById('passwordError').textContent = 'Password must be at least 6 characters';
                event.preventDefault();
            }

            // Validate phone
            const phoneRegex = /^[0-9]*$/; // Regex to allow only numeric characters
            if (!phoneRegex.test(phone)) {
                document.getElementById('phoneError').textContent = 'Invalid phone number';
                event.preventDefault();
            }
        }
    </script>

</form>
</body>
</html>

#EXP2 (HTML page with headings and paragraphs)
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Exp2</title>
    <style>
        body {
            font-family: 'Arial', sans-serif;
            background: linear-gradient(to bottom, #0f1c4b, #0c1440, #090c35, #070a2b, #040720);
            color: white;
            margin: 0;
            padding: 0;
            text-align: center;
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            min-height: 100vh; /* Ensures the content container takes at least the full viewport height */
        }

        .content-container {
            padding: 20px;
            border-radius: 10px;
            width: 80%;
            box-sizing: border-box;
            margin-top: 20px;
        }

        h1, h2, h3, h4 {
            color: white;
            border: 2px solid white; /* Changed from border-bottom to border */
            border-radius: 10px;
            padding: 10px;
            margin-bottom: 20px;
        }

        p {
            line-height: 1.6;
            margin-bottom: 15px;
        }

        ul, ol {
            margin-left: 0;
            margin-bottom: 15px;
            padding-left: 0;
        }

        li {
            margin-bottom: 5px;
        }
    </style>
</head>
<body>

<h1>Welcome to My Styled HTML Page</h1>

<div class="content-container">

    <h2>Exploring the Mysteries of the Cosmos</h2>

    <p>Space, the final frontier! The cosmos has always captivated the human imagination. From the mesmerizing dance of celestial bodies to the mysteries hidden in the dark expanse, our quest for understanding the universe is unending.</p><br>

    <h3>Black Holes: Cosmic Enigmas</h3>

    <p>Black holes, the enigmatic regions of spacetime where gravity is so strong that nothing, not even light, can escape. These celestial entities continue to captivate scientists and stargazers alike.</p><br>

    <h4>String Theory: A Quest for Unification</h4>

    <p>String theory, a theoretical framework that seeks to unify the fundamental forces of the universe. According to this concept, the building blocks of the universe are not point particles but tiny, vibrating strings, offering a potential path to a grand unification theory.</p><br>

    <ul>
        <li><strong>The Vibrating Strings:</strong> In string theory, the properties of particles are determined by the vibrational modes of tiny strings. Each vibration corresponds to a different particle, providing a unique perspective on the nature of matter and forces.</li>
        <li><strong>Extra Dimensions:</strong> String theory introduces extra spatial dimensions beyond the familiar three. These dimensions, if they exist, could be compactified and play a crucial role in the fabric of reality.</li>
        <li><strong>Challenges and Excitement:</strong> String theory faces challenges and criticisms, but its potential to answer fundamental questions about the universe keeps researchers intrigued.</li><br>
    </ul>

    <h4>Hawking Radiation: A Glimmer of Light</h4>

    <p>Hawking radiation, a theoretical prediction by physicist Stephen Hawking, suggests that black holes are not completely black. Due to quantum effects near the event horizon, black holes can emit radiation and gradually lose mass.</p>

    <ol>
        <li><strong>Quantum Particle Pairs:</strong> According to quantum mechanics, particle-antiparticle pairs continuously pop in and out of existence near the event horizon of a black hole.</li>
        <li><strong>Escape from the Abyss:</strong> Occasionally, one particle of the pair falls into the black hole, while the other escapes as Hawking radiation. This subtle process provides a mechanism for black holes to lose mass over time.</li>
        <li><strong>Challenging Our Understanding:</strong> Hawking radiation challenges traditional views about the irreversible nature of black holes and raises questions about the ultimate fate of these cosmic phenomena.</li>
    </ol>

    <p>Embark on this intellectual journey through the cosmos, where the mysteries of black holes, string theory, and Hawking radiation beckon us to explore the profound depths of our understanding.</p>

</div>

</body>
</html>

#EXP3 (Read and write HTML content with Jquery)
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Read and Write HTML with jQuery</title>
    <script src="https://code.jquery.com/jquery-3.6.4.min.js"></script>
    <script>
        $(document).ready(function () {
            // Read HTML content
            var existingContent = $("#targetElement").html();
            console.log("Existing HTML content:", existingContent);

            // Write HTML content
            var newContent = "<p>This is the new content added with jQuery!</p>";
            $("#targetElement").html(newContent);
        });
    </script>
</head>
<body>

<div id="targetElement">
    <p>This is the initial content.</p>
</div>

</body>
</html>

#EXP4 (Angular app)
Step 1: Setup Angular Project

-Install Angular CLI:
npm install -g @angular/cli

-Create a new Angular project:
ng new my-angular-app

-Navigate to the project folder:
cd my-angular-app

Step 2: Create Components
-Create two components, a parent component (app.component) and a child component (child.component).
ng generate component parent
ng generate component child

Step 3: Design Components
-parent.component.html
<h1>Parent Component</h1>
<app-child [message]="parentMessage"></app-child>

-child.component.html
<h2>Child Component</h2>
<p>{{ message }}</p>

Step 4: Pass Data between Components
-parent.component.ts
import { Component } from '@angular/core';

@Component({
  selector: 'app-parent',
  templateUrl: './parent.component.html',
  styleUrls: ['./parent.component.css']
})
export class ParentComponent {
  parentMessage = 'Message from Parent';
}

-child.component.ts
import { Component, Input } from '@angular/core';

@Component({
  selector: 'app-child',
  templateUrl: './child.component.html',
  styleUrls: ['./child.component.css']
})
export class ChildComponent {
  @Input() message: string | undefined;
}

Step 5: Run the Application
ng serve

Step 6: Unit Testing
-Angular applications come with built-in testing support using Jasmine and Karma. Angular CLI provides commands to generate and run tests.
ng test

-Writing Tests
-Example unit test for the child component:
import { ComponentFixture, TestBed } from '@angular/core/testing';
import { ChildComponent } from './child.component';

describe('ChildComponent', () => {
  let component: ChildComponent;
  let fixture: ComponentFixture<ChildComponent>;

  beforeEach(() => {
    TestBed.configureTestingModule({
      declarations: [ChildComponent]
    });

    fixture = TestBed.createComponent(ChildComponent);
    component = fixture.componentInstance;
  });

  it('should display the message', () => {
    component.message = 'Test Message';
    fixture.detectChanges();
    const compiled = fixture.nativeElement;
    expect(compiled.querySelector('p').textContent).toContain('Test Message');
  });
});

#EXP5 (NodeJS application)

#.JS file
const express = require('express');
const path = require('path');

const app = express();
const port = 3000;

// Serve static files (CSS, images, etc.) from the "public" folder
app.use(express.static(path.join(__dirname, 'public')));

// Define a route for the home page
app.get('/', (req, res) => {
  res.sendFile(path.join(__dirname, 'public', 'index.html'));
});

// Start the server
app.listen(port, () => {
  console.log(`Server is running on http://localhost:${port}`);
});

#.html file
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="styles.css">
    <title>Node.js Web Page</title>
    <style>
        body {
  font-family: 'Arial', sans-serif;
  margin: 0;
  padding: 0;
  background-color: #f4f4f4;
}

header {
  background-color: #333;
  color: white;
  padding: 20px;
  text-align: center;
}

main {
  max-width: 800px;
  margin: 20px auto;
  padding: 20px;
  background-color: white;
}

    </style>
</head>
<body>
<header>
    <h1>Welcome to My Node.js Web Page</h1>
</header>
<main>
    <p>This is a simple web page served by a Node.js server.</p>
</main>
</body>
</html>

#EXP6 (Postman)
.JS file
document.addEventListener('DOMContentLoaded', () => {
    const dataContainer = document.getElementById('dataContainer');
  
    // Make a request to a sample API (JSONPlaceholder) to retrieve data
    fetch('https://jsonplaceholder.typicode.com/posts')
      .then(response => response.json())
      .then(data => {
        // Display the retrieved data
        dataContainer.innerHTML = `<pre>${JSON.stringify(data, null, 2)}</pre>`;
      })
      .catch(error => {
        dataContainer.textContent = 'Error fetching data';
        console.error('Error:', error);
      });
  });

#.HTML file
<!--
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Data Retrieval Web Page</title>
  <style>
    body {
        font-family: 'Arial', sans-serif;
        margin: 0;
        padding: 0;
        background-color: #f4f4f4;
        text-align: center;
    }

    header {
        background-color: #333;
        color: white;
        padding: 20px;
    }

    main {
        max-width: 800px;
        margin: 20px auto;
        padding: 20px;
        background-color: white;
    }
  </style>
</head>
<body>

<header>
  <h1>Data Retrieval Web Page</h1>
</header>

<main>
  <p id="dataMessage">Data will be displayed here.</p>
  <button onclick="getData()">Retrieve Data</button>

  <script>
    function getData() {
        // Use Fetch API to retrieve data from the server
        fetch('http://localhost:3000/api/data')
            .then(response => response.json())
            .then(data => {
                document.getElementById('dataMessage').textContent = `Message: ${data.message}\nTimestamp: ${data.timestamp}`;
            })
            .catch(error => console.error('Error:', error));
    }
  </script>
</main>

</body>
</html>-->

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Data Retrieval using Postman</title>
  <style>
    body {
        font-family: sans-serif;
    }

    .data-container {
        border: 1px solid navy;
        padding: 10px;
    }
  </style>
</head>
<body>
<h1>Data Retrieval using Postman Method</h1>

<p>This webpage demonstrates how to retrieve data from an API using the Postman method.</p>

<button id="getDataBtn">Get Data</button>

<div class="data-container" id="dataDisplay">
</div>

<script>
  const getDataBtn = document.getElementById('getDataBtn');
  const dataDisplay = document.getElementById('dataDisplay');

  getDataBtn.addEventListener('click', async () => {
      try {
          const response = await fetch('https://dummyjson.com/products/1');
          const data = await response.json();

          dataDisplay.innerHTML = `
              <h2>Post Data</h2>
              <p>ID: ${data.id}</p>
              <p>Title: ${data.title}</p>
              <p>Body: ${data.body}</p>
          `;
      } catch (error) {
          console.error('Error retrieving data:', error);
          dataDisplay.innerHTML = '<p>Error retrieving data.</p>';
      }
  });
</script>
</body>
</html>

#EXP7 (book catalog info)
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Book Catalog</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            background-color: #f4f4f4;
            margin: 0;
            padding: 20px;
            text-align: center;
        }

        form {
            max-width: 400px;
            margin: 20px auto;
            background-color: #fff;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
        }

        label {
            display: block;
            margin-bottom: 8px;
        }

        input {
            width: 100%;
            padding: 8px;
            margin-bottom: 16px;
            box-sizing: border-box;
        }

        button {
            background-color: #007BFF;
            color: #fff;
            padding: 10px 20px;
            border: none;
            border-radius: 4px;
            cursor: pointer;
        }

        button:hover {
            background-color: #0056b3;
        }

        #displayValues {
            max-width: 400px;
            margin: 20px auto;
            background-color: #fff;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
        }
    </style>
</head>
<body>

<h1>Book Catalog</h1>

<form id="bookForm" onsubmit="validateForm(event)">
    <label for="title">Title:</label>
    <input type="text" id="title" required>

    <label for="author">Author:</label>
    <input type="text" id="author" required>

    <label for="year">Publication Year:</label>
    <input type="number" id="year" required>

    <label for="isbn">ISBN:</label>
    <input type="text" id="isbn" required>

    <button type="submit">Add Book</button>
</form>

<div id="displayValues"></div>

<script>
    function validateForm(event) {
        // Basic validation
        const year = document.getElementById('year').value;
        const isbn = document.getElementById('isbn').value;

        if (isNaN(year) || year.length !== 4) {
            alert('Invalid year. Please enter a valid 4-digit year.');
            event.preventDefault();
        } else if (!/^\d{13}$/.test(isbn)) {
            alert('Invalid ISBN. Please enter a valid 13-digit ISBN.');
            event.preventDefault();
        } else {
            // Display entered values
            displayEnteredValues();
            // Prevent the default form submission behavior
            event.preventDefault();
        }
    }

    function displayEnteredValues() {
        const title = document.getElementById('title').value;
        const author = document.getElementById('author').value;
        const year = document.getElementById('year').value;
        const isbn = document.getElementById('isbn').value;

        const displayValuesDiv = document.getElementById('displayValues');
        displayValuesDiv.innerHTML = `
            <h2>Entered Values</h2>
            <p><strong>Title:</strong> ${title}</p>
            <p><strong>Author:</strong> ${author}</p>
            <p><strong>Year:</strong> ${year}</p>
            <p><strong>ISBN:</strong> ${isbn}</p>
        `;
    }
</script>


</body>
</html>

#EXP8 (responsive registration webpage)
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Registration Form</title>
    <link rel="stylesheet" href="styles.css"> <!-- Link to your CSS file -->
   <style>
    body {
    font-family: 'Arial', sans-serif;
    margin: 0;
    padding: 0;
    background-color: #f4f4f4;
    }

    .container {
    max-width: 600px;
    margin: 50px auto;
    background-color: #fff;
    padding: 20px;
    border-radius: 8px;
    box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
    }

    .form {
    display: flex;
    flex-direction: column;
    align-items: center;
    }

    .form-group {
    margin-bottom: 20px;
    }

    label {
    font-weight: bold;
    margin-bottom: 8px;
    }

    input {
    width: 100%;
    padding: 10px;
    box-sizing: border-box;
    border: 1px solid #ccc;
    border-radius: 4px;
    margin-top: 4px;
    }

    button {
    background-color: #007BFF;
    color: #fff;
    padding: 10px 20px;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    }

    button:hover {
    background-color: #0056b3;
    }

    @media screen and (max-width: 600px) {
    .container {
    margin: 20px auto;
    }
    }
</style>
</head>
<body>
<div class="container">
    <form id="registrationForm" class="form">
        <h2>Registration Form</h2>
        <div class="form-group">
            <label for="username">Username:</label>
            <input type="text" id="username" name="username" required>
        </div>
        <div class="form-group">
            <label for="email">Email:</label>
            <input type="email" id="email" name="email" required>
        </div>
        <div class="form-group">
            <label for="password">Password:</label>
            <input type="password" id="password" name="password" required>
        </div>
        <div class="form-group">
            <label for="confirmPassword">Confirm Password:</label>
            <input type="password" id="confirmPassword" name="confirmPassword" required>
        </div>
        <button type="submit">Register</button>
    </form>
</div>
</body>
</html>

#EXP9 (image slider JS and JQuery)
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Image Slider</title>
    <style>
        #slider-container {
            width: 80%;
            margin: auto;
            overflow: hidden;
        }

        #slider-images {
            display: flex;
            transition: transform 0.5s ease-in-out;
        }

        .slider-image {
            width: 100%;
            height: auto;
        }

        #prev, #next {
            cursor: pointer;
            font-size: 24px;
            background-color: #007BFF;
            color: #fff;
            border: none;
            border-radius: 5px;
            padding: 10px;
            margin-top: 10px;
        }

        #prev:hover, #next:hover {
            background-color: #0056b3;
        }
    </style>
</head>
<body>

<div id="slider-container">
    <div id="slider-images">
        <img class="slider-image" src="image1.jpg" alt="Image 1">
        <img class="slider-image" src="image2.jpg" alt="Image 2">
        <img class="slider-image" src="image3.jpg" alt="Image 3">
    </div>
</div>

<button id="prev">&lt; Prev</button>
<button id="next">Next &gt;</button>

<script src="https://code.jquery.com/jquery-3.6.4.min.js"></script>
<script>
    $(document).ready(function () {
        const sliderImages = $('#slider-images');
        const imageWidth = $('.slider-image').width();
        let currentIndex = 0;

        // Function to update the slider position
        function updateSlider() {
            const newPosition = -currentIndex * imageWidth;
            sliderImages.css('transform', 'translateX(' + newPosition + 'px)');
        }

        // Next button click event
        $('#next').click(function () {
            currentIndex = (currentIndex + 1) % $('.slider-image').length;
            updateSlider();
        });

        // Prev button click event
        $('#prev').click(function () {
            currentIndex = (currentIndex - 1 + $('.slider-image').length) % $('.slider-image').length;
            updateSlider();
        });
    });
</script>

</body>
</html>

#EXP10 (client-side)
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Registration Form with Validation</title>
    <style>
        body {
    font-family: 'Arial', sans-serif;
    background-color: #f4f4f4;
    margin: 0;
    padding: 0;
    display: flex;
    align-items: center;
    justify-content: center;
    height: 100vh;
}

.container {
    background-color: #fff;
    border-radius: 8px;
    box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
    padding: 20px;
    width: 400px;
}

.form {
    text-align: left;
}

.form-group {
    margin-bottom: 20px;
}

label {
    display: block;
    margin-bottom: 8px;
}

input {
    width: 100%;
    padding: 8px;
    margin-bottom: 8px;
    box-sizing: border-box;
}

.error {
    color: red;
    font-size: 14px;
    margin-top: 4px;
}

button {
    background-color: #007BFF;
    color: #fff;
    padding: 10px 20px;
    border: none;
    border-radius: 4px;
    cursor: pointer;
}

button:hover {
    background-color: #0056b3;
}
    </style>

</head>
<body>
<div class="container">
    <form id="registrationForm" class="form" onsubmit="return validateForm()">
        <h2>Registration Form</h2>
        <div class="form-group">
            <label for="username">Username:</label>
            <input type="text" id="username" name="username" required>
        </div>
        <div class="form-group">
            <label for="email">Email:</label>
            <input type="email" id="email" name="email" required>
            <span id="emailError" class="error"></span>
        </div>
        <div class="form-group">
            <label for="password">Password:</label>
            <input type="password" id="password" name="password" required>
            <span id="passwordError" class="error"></span>
        </div>
        <div class="form-group">
            <label for="confirmPassword">Confirm Password:</label>
            <input type="password" id="confirmPassword" name="confirmPassword" required>
            <span id="confirmPasswordError" class="error"></span>
        </div>
        <button type="submit">Register</button>
    </form>
</div>

<script>
    function validateForm() {
        const username = document.getElementById('username').value;
        const email = document.getElementById('email').value;
        const password = document.getElementById('password').value;
        const confirmPassword = document.getElementById('confirmPassword').value;

        // Validate email
        const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
        if (!emailRegex.test(email)) {
            document.getElementById('emailError').textContent = 'Invalid email address';
            return false;
        } else {
            document.getElementById('emailError').textContent = '';
        }

        // Validate password strength
        if (password.length < 8) {
            document.getElementById('passwordError').textContent = 'Password must be at least 8 characters';
            return false;
        } else {
            document.getElementById('passwordError').textContent = '';
        }

        // Validate password match
        if (password !== confirmPassword) {
            document.getElementById('confirmPasswordError').textContent = 'Passwords do not match';
            return false;
        } else {
            document.getElementById('confirmPasswordError').textContent = '';
        }

        // If all validations pass, the form is submitted
        alert(`Registration Successful!\nUsername: ${username}\nEmail: ${email}`);
        return true;
    }
</script>
</body>
</html>

#EXP11 (shopping cart)
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Shopping Cart</title>
    <style>
        body {
            font-family: 'Arial', sans-serif;
            background-color: #f4f4f4;
            margin: 0;
            padding: 20px;
            text-align: center;
        }

        #cart {
            max-width: 600px;
            margin: 20px auto;
            background-color: #fff;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
        }

        .item {
            display: flex;
            justify-content: space-between;
            align-items: center;
            border-bottom: 1px solid #ddd;
            padding: 10px 0;
        }

        .item img {
            max-width: 50px;
            max-height: 50px;
            margin-right: 10px;
        }

        button {
            background-color: #007BFF;
            color: #fff;
            padding: 8px 16px;
            border: none;
            border-radius: 4px;
            cursor: pointer;
        }

        button:hover {
            background-color: #0056b3;
        }

        #total {
            font-weight: bold;
            margin-top: 20px;
        }
    </style>
</head>
<body>

<div id="cart">
    <h2>Shopping Cart</h2>
    <div id="items"></div>
    <div id="total">Total: $0.00</div>

    <select id="itemSelection">
        <option value="1">Item 1</option>
        <option value="2">Item 2</option>
        <option value="3">Item 3</option>
    </select>

    <button onclick="addItem()">Add to Cart</button>
</div>

<script>
    const items = [
        { id: 1, name: 'Item 1', price: 10.99 },
        { id: 2, name: 'Item 2', price: 19.99 },
        { id: 3, name: 'Item 3', price: 5.99 }
    ];

    const cart = [];

    function updateCart() {
        const itemsContainer = document.getElementById('items');
        const totalContainer = document.getElementById('total');
        itemsContainer.innerHTML = '';

        let total = 0;

        cart.forEach(cartItem => {
            const item = items.find(item => item.id === cartItem.id);
            const itemTotal = item.price * cartItem.quantity;

            total += itemTotal;

            const itemDiv = document.createElement('div');
            itemDiv.textContent = `${item.name} x${cartItem.quantity} - $${itemTotal.toFixed(2)}`;
            itemsContainer.appendChild(itemDiv);
        });

        totalContainer.textContent = `Total: $${total.toFixed(2)}`;
    }

    function addItem() {
        const selectedItem = parseInt(document.getElementById('itemSelection').value);
        const existingItem = cart.find(item => item.id === selectedItem);

        if (existingItem) {
            existingItem.quantity++;
        } else {
            cart.push({ id: selectedItem, quantity: 1 });
        }

        updateCart();
    }

    function removeItem(itemId) {
        const index = cart.findIndex(item => item.id === itemId);

        if (index !== -1) {
            const item = cart[index];

            if (item.quantity > 1) {
                item.quantity--;
            } else {
                cart.splice(index, 1);
            }

            updateCart();
        }
    }

    updateCart(); // Initial rendering
</script>


</body>
</html>













